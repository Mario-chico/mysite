---
import Moon from '@/icons/moon.astro';
import Sun from '@/icons/sun.astro';
import {DARK_THEME, LIGHT_THEME} from '@/const/themes';
---

<button id="themeToggle">
  <Sun class="sun"/>
  <Moon class="moon"/>
  <span class="sr-only"></span>
</button>

<style>
  #themeToggle {
    display: inline-flex;
    cursor: pointer; 
    background: none;
    border: 0;
    transition: all 0.3s ease-out;
  }
  #themeToggle:hover{
    transform: scale(1.25);
    opacity: 7;
    transition: all 0.3s ease-in;
  } 
  .sun {
    color: black;
  }
  
  

  /* :global(.dark) .sun {
    fill: transparent;
  }
  :global(.dark) .moon {
    transform: rotate(0);
    opacity: 1;
  } */
</style>

<script is:inline define:vars={{ darkTheme: DARK_THEME, lightTheme: LIGHT_THEME }}>
	function handleToggleClick() {
		const element = document.documentElement
		element.classList.toggle(darkTheme)

		const isDark = element.classList.contains(darkTheme)
		localStorage.setItem("theme", isDark ? darkTheme : lightTheme)

    console.log("En el themeIcon");
		updateThemeMessage(isDark)
	}

	function updateThemeMessage(theme) {
		const translation = theme ? "oscuro" : "claro"
		const actualThemeMsg = `Alternar tema, el tema actual es ${translation}`
		const span = document.querySelector("span.sr-only")
		span.innerHTML = actualThemeMsg

		window.dispatchEvent(new Event("theme-changed"))
	}

	const handleThemePreferenceChange = (e) => {
		const isDark = document.documentElement.classList.contains("dark")
		const toggle = (e.matches && !isDark) || (!e.matches && isDark)
		if (toggle) handleToggleClick()
	}

	const darkModePreference = window.matchMedia("(prefers-color-scheme: dark)")
	darkModePreference.addEventListener("change", handleThemePreferenceChange)
	darkModePreference.addListener(handleThemePreferenceChange) // backward compatibility

	document.getElementById("themeToggle").addEventListener("click", handleToggleClick);
	updateThemeMessage(window.getThemePreference());
</script>
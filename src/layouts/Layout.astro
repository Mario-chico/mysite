---
import Footer from '@/sections/Footer.astro';
import Header from '@/sections/Header.astro';
// Supports weights 100-900
import '@fontsource-variable/geologica';

interface Props {
	title: string;
}

const { title } = Astro.props;

import {getI18N} from '@/i18n'

const {currentLocale} = Astro

const i18n = getI18N({currentLocale})
---

<!doctype html>
<html lang={currentLocale}>
	<head>
		<meta charset="UTF-8" />
		<meta name="description" content="Desarrollador Web especializado en crear experiencias digitales" />
		<meta name="viewport" content="width=device-width" />
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		<title>{title}</title>
		<script is:inline>
			window.getThemePreference = () => {
				const localItem = typeof localStorage !== 'undefined' && localStorage.getItem('theme') 
				if(localItem) return localItem
				return window.matchMedia('(prefers-color-scheme: dark)').matches ? "dark" : "light"
			}
			const isDark = window.getThemePreference() === "dark";
			document.documentElement.classList.toggle("dark", isDark);
			console.log("En el layout");
		</script>
	</head>
	<body>
		<div class="noise" > </div>
		<Header />
		<slot />
		<Footer />
		<script>
			import '@/scripts/menu';
		</script>
	</body>
</html>
<style is:global>
	:root {
		--title-color: #000000;
		--tex-color: #01014B; 
		--background-color: #f1edec;
		--p: #FFD07F;
		--p2: #f9f7dc;
		--accent-color:#FF8243;
		--burger-color: #000000e8;
		--gradient-color: linear-gradient(90deg, rgb(31, 30, 29) 10%, rgb(124, 48, 179) 45%, rgb(21, 187, 77) 100%);
		color-scheme: dark light;
	}
	.dark {
		--title-color: #e7ff50;
		--tex-color: rgb(242, 242, 242);
		--background-color: rgb(57, 54, 70);
		--accent-color:#151118;
		--burger-color: #fbfbfe;
		--gradient-color: linear-gradient(90deg, rgb(231, 255, 80) 0%, rgb(213, 226, 122) 15%, rgb(242, 242, 242) 100%);
	} 
	* {
		margin: 0;
		padding: 0;
		box-sizing: border-box;
	}
	html {
		font-family: 'Geologica Variable', sans-serif;
		color: var(--tex-color);
		background-color: var(--background-color);
	}
	body.show{
		overflow: hidden;
	}
	h1, h2, h3, h4, h5, h6 {
		color: var(--title-color);
		text-wrap: balance;
	}
	h1{
		font-size: 3.1rem;
		font-weight: 900;
	}
	h2{
		font-weight: 800;
		font-size: 1.5rem;
	}
	h3 {
		font-size: 1.25rem;
		font-weight: 700;
	}
	p, a {
		color: var(--tex-color);
		text-wrap: pretty;
		text-decoration: none;
		font-weight: 600;
	}
	.noise{
		position:fixed;
		width: 100%;
		height: 100%;
		z-index: -30;
		background-color:#00000008;
		background-image: url('/noise.svg');
		background-repeat: repeat;
		background-size: 200px;
	}

	.moon {
    opacity: 0;
		position: absolute;
		transform: rotate(90deg);
		transition-property: transform;
		transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
		transition-duration: 150ms;
  }
	.sun {
    transition-property: transform;
		transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
		transition-duration: 500ms;
		opacity: 1;
	}
	.dark .moon {
    position: absolute;
    opacity: 1;
    transform: rotate(0deg);
    transition-property: transform;
		transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
		transition-duration: 500ms;
  }
	.dark .sun {
		transform: rotate(90deg);
		opacity: 0;
	}
/* Hiding class, making content visible only to screen readers but not visually */
	/* "sr" meaning "screen-reader" */
	.sr-only:not(:focus):not(:active) {
		clip: rect(0 0 0 0);
		clip-path: inset(50%);
		height: 1px;
		overflow: hidden;
		position: absolute;
		white-space: nowrap;
		width: 1px;
	}
.darkImg {
	opacity: 0;
	position: absolute;
}
	.dark .darkImg {
		opacity: 1;
		position: relative;
	}
	.dark .lightImg {
		opacity: 0;
		position: absolute;
	}
	

</style>
